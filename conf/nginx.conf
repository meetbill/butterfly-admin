# ===================== 全局配置优化 =====================
# 1. 工作进程数：绑定 CPU 核心（自动适配核心数，避免进程切换开销）
worker_processes auto;
worker_cpu_affinity auto;  # 进程与 CPU 核心绑定，提升性能

# 2. 错误日志：生产环境建议用 notice（debug 日志过大，仅调试用）
error_log logs/error.log notice;
# error_log logs/error.log debug;  # 调试时启用

# 3. PID 文件路径（保持原路径，确保权限可写）
pid logs/nginx.pid;

# 4. 工作进程最大打开文件数（提升并发能力，建议大于 worker_connections）
worker_rlimit_nofile 65535;


# ===================== 事件模块优化 =====================
events {
    use epoll;  # 复用 Linux 高效 I/O 模型（仅 Linux 生效）
    worker_connections 4096;  # 单进程最大连接数（原 2048 翻倍，适配高并发）
    multi_accept on;  # 一次接收所有新连接，减少系统调用
}


# ===================== HTTP 核心配置 =====================
http {
    include mime.types;
    default_type application/octet-stream;

    # 1. 字符集全局配置（避免局部重复定义）
    charset utf-8;

    # 2. 日志配置：新增 $request_time 记录请求耗时，便于性能分析
    log_format main '$remote_addr $request_uri - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    '$request_time $upstream_response_time';  # 新增：请求耗时、后端响应耗时
    access_log logs/butterfly.access.log main;

    # 3. 临时文件路径优化：补充权限配置，避免权限报错
    client_body_temp_path cache/client_body 1 2;  # 1级目录+2级子目录，分散磁盘IO
    fastcgi_temp_path cache/fastcgi 1 2;
    proxy_temp_path cache/proxy 1 2;
    uwsgi_temp_path cache/uwsgi 1 2;
    scgi_temp_path cache/scgi 1 2;
    client_body_in_file_only clean;  # 临时文件仅在需要时生成，避免残留

    # 4. 性能优化配置
    sendfile on;  # 启用零拷贝，提升文件传输效率
    tcp_nopush on;  # 配合 sendfile 使用，减少 TCP 包数量
    tcp_nodelay on;  # 高并发场景下，降低延迟（避免数据堆积）
    keepalive_timeout 65;  # 客户端长连接超时时间（保持原配置）
    keepalive_requests 100;  # 单个长连接最大请求数（默认100，无需修改）

    # 5. 客户端请求限制
    client_max_body_size 10m;   # 限制客户端请求体大小（根据业务调整，默认 1m 可能过小）
    client_header_timeout 10s;  # 客户端请求头超时
    client_body_timeout 10s;    # 客户端请求体超时

    # 6. 压缩配置：减少传输带宽，提升加载速度
    gzip on;
    gzip_min_length 1k;  # 小于1k的文件不压缩（避免浪费CPU）
    gzip_buffers 4 16k;  # 压缩缓冲区大小
    gzip_http_version 1.1;
    gzip_comp_level 6;  # 压缩级别（1-9，6为平衡值）
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss;  # 需压缩的文件类型
    gzip_vary on;  # 告诉客户端支持压缩，避免重复压缩

    # 7. 代理配置优化：统一代理参数，避免重复定义
    proxy_set_header Host $host:$server_port;  # 保持原配置，传递完整主机+端口
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Real-PORT $remote_port;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;  # 新增：传递协议（http/https），适配HTTPS场景
    proxy_connect_timeout 10s;  # 代理连接超时
    proxy_send_timeout 10s;  # 代理发送超时
    proxy_read_timeout 30s;  # 代理读取超时（后端处理慢时需调大）
    proxy_buffer_size 4k;  # 代理缓冲区大小（默认4k，根据业务调整）
    proxy_buffers 4 32k;
    proxy_hide_header X-Powered-By;  # 隐藏后端技术栈（如PHP/Java），减少攻击面
    proxy_hide_header Server;  # 隐藏Nginx版本（可选，增强安全性）

    # 8. 负载均衡配置：补充备份节点（可选，提升可用性）
    upstream backend {
        # ip_hash;  # 如需会话保持，取消注释（注意：后端节点不可用时会有问题）
        server 127.0.0.1:8201 max_fails=2 fail_timeout=30s;  # 主节点
        # server 127.0.0.1:8202 max_fails=2 fail_timeout=30s backup;  # 备份节点（可选，根据业务添加）
    }


    # ===================== 虚拟主机配置（核心业务） =====================
    server {
        listen 8000;
        server_name _;  # 无指定域名时，用下划线匹配（避免默认主机冲突）

        # -------------------- 1. 认证相关配置 --------------------
        # 内部认证接口（仅Nginx内部调用，外部无法访问）
        location = /auth/verification {
            internal;  # 关键：标记为内部接口，防止外部直接访问
            proxy_pass http://127.0.0.1:8011;
            proxy_pass_request_body off;  # 认证接口无需请求体
            proxy_set_header Content-Length "";  # 清空Content-Length，避免后端报错
            proxy_set_header X-Original-URI $request_uri;  # 传递原始请求URI
            # 其他代理头已在http段全局定义，无需重复
        }

        # 认证失败处理（401响应）
        location = /butterfly_401 {
            internal;
            default_type application/json;
            # 修复：添加默认返回（避免 $butterfly_location 为空时无响应）
            if ($butterfly_location) {
                return 401 '{"success":false,"message":"You are not authorized","data":{"redirect":"$butterfly_location"}}';
            }
            return 401 '{"success":false,"message":"You are not authorized","data":{}}';  # 默认响应
        }

        # SSO登录接口（外部可访问，代理到认证服务）
        location /auth/ssologin {
            proxy_pass http://127.0.0.1:8011;
            proxy_set_header X-Original-URI $request_uri;  # 传递原始请求URI
            # 其他代理头已在http段全局定义，无需重复
        }

        # -------------------- 2. 静态资源配置（优先级：精确匹配 > 正则匹配） --------------------
        # 首页（精确匹配 /，优先级最高，避免被反向代理覆盖）
        location = / {
            root ./templates;  # 保留相对路径：基于 Nginx 启动目录（建议启动时指定目录，如 nginx -p /usr/local/nginx）
            index index_sso.html;
            expires -1;  # 首页不缓存（避免更新后用户看不到最新内容）
        }

        # 首页HTML文件（精确匹配，防止被/static/正则覆盖）
        location = /index_sso.html {
            root ./templates;
            expires -1;  # 不缓存
        }

        # 网站图标（精确匹配）
        location = /favicon.ico {
            root ./templates;
            expires 1M;  # 图标长期缓存（1个月）
            log_not_found off;  # 避免404日志刷屏
        }

        # JS文件：缓存1年（精确正则，优先级高于 /static/ 通用规则）
        location ~* ^/static/.*\.js$ {
            root .;  # 相对路径：基于 Nginx 启动目录（确保 static 目录在启动目录下）
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";  # immutable：禁止浏览器重新验证
            add_header ETag "";  # 禁用ETag，减少304请求（依赖max-age即可）
        }

        # JSON文件：不缓存（精确正则，优先级高于 /static/ 通用规则）
        location ~* ^/static/.*\.json$ {
            root .;
            add_header Cache-Control "no-store, no-cache, must-revalidate";  # 三重保险：禁止缓存
            expires -1;
            add_header Pragma "no-cache";  # 兼容旧浏览器
        }

        # 其他静态资源（CSS/图片等）：缓存1个月（通用正则，优先级最低）
        location ~* ^/static/ {
            root .;
            expires 1M;
            add_header Cache-Control "public, max-age=2592000";
            # 可选：开启静态资源防盗链（根据业务需求启用）
            # valid_referers none blocked yourdomain.com;
            # if ($invalid_referer) { return 403; }
        }

        # -------------------- 3. 反向代理配置（所有非静态路径，优先级最低） --------------------
        location / {
            auth_request /auth/verification;  # 触发内部认证
            auth_request_set $butterfly_location $upstream_http_location;  # 接收认证服务返回的location
            auth_request_set $butterfly_username $upstream_http_username;  # 接收认证服务返回的username
            error_page 401 = /butterfly_401;  # 认证失败跳转到401处理

            proxy_redirect off;
            proxy_set_header X-Username $butterfly_username;  # 传递用户名到后端（仅此处需要，单独定义）
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;  # 后端故障时切换节点
            proxy_pass http://backend;  # 代理到负载均衡集群
        }

        # -------------------- 4. Nginx状态监控（安全增强） --------------------
        location /nginx_status {
            stub_status on; # 编译时添加 --with-http_stub_status_module
            access_log off; # 关闭访问日志
            allow 192.168.10.0/24;  # 仅允许内网网段访问
            allow 127.0.0.1;  # 允许本地访问（便于运维排查）
            deny all;  # 拒绝其他所有IP
        }

        # -------------------- 5. 错误页面配置 --------------------
        error_page 404 /404.html;  # 补充404页面（原配置缺失）
        error_page 500 502 503 504 /50x.html;

        # 404页面（静态页面，路径与50x.html一致）
        location = /404.html {
            root html;  # Nginx默认html目录（相对路径，基于启动目录）
            expires -1;
        }

        # 5xx页面（保持原配置）
        location = /50x.html {
            root html;
            expires -1;
        }
    }

    # ===================== 其他虚拟主机（如需扩展，在此添加） =====================
    # server {
    #     listen 8080;
    #     ...
    # }
}
