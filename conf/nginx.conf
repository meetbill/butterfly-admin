worker_processes  2;

error_log  logs/error.log  debug;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid        logs/nginx.pid;


events {
    use epoll;
    worker_connections  2048;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr $request_uri - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    client_body_temp_path cache/client_body;
    fastcgi_temp_path cache/fastcgi;
    proxy_temp_path cache/proxy;
    uwsgi_temp_path cache/uwsgi;
    scgi_temp_path cache/scgi;

    sendfile        on;
    # tcp_nopush     on;

    keepalive_timeout  65;


    # 设定负载均衡后台服务器列表
    upstream  backend  {
            #ip_hash;
            server   127.0.0.1:8201  max_fails=2 fail_timeout=30s ;
    }

    # 很重要的虚拟主机配置
    server {
        listen       8000;

        charset utf-8;
        access_log  logs/butterfly.access.log  main;

        location = /auth/verification {
            internal;
            proxy_pass http://127.0.0.1:8011;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header Host  $host:$server_port;
            proxy_set_header X-Real-IP  $remote_addr;
            proxy_set_header X-Real-PORT $remote_port;
            proxy_set_header X-Forwarded-For  $proxy_add_x_forwarded_for;
        }


        #对 / 所有做负载均衡 + 反向代理
        location / {
            auth_request        /auth/verification;
            auth_request_set    $butterfly_location $upstream_http_location;
            auth_request_set    $butterfly_username $upstream_http_username;
            error_page 401    = /butterfly_401;
            proxy_redirect off;
            # 后端的 Web 服务器可以通过 X-Forwarded-For 获取用户真实 IP
            proxy_set_header Host               $host:$server_port;
            proxy_set_header  X-Real-IP         $remote_addr;
            proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header  X-Username        $butterfly_username;
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_pass        http://backend;
        }

        location  = /butterfly_401 {
            internal;
            default_type application/json;
            if ($butterfly_location) {
                return 401 '{"success":false,"message":"You are not authorized","data":{"redirect":"$butterfly_location"}}';
            }
        }

        # 首页处理
        location = / {
            root  ./templates;
            index index_sso.html;
        }
        location = /index_sso.html {
            root  ./templates;
        }
        location = /favicon.ico {
            root  ./templates;
        }

        # /static/ 路径下的 JS 文件缓存 1 年
        location ~* ^/static/.*\.(js)$ {
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
        }

        # /static/ 路径下的 JSON 文件不缓存
        location ~* ^/static/.*\.(json)$ {
            add_header Cache-Control "no-store";
            expires -1;  # 强制过期（等同于不缓存）
        }

        # /static/ 下的其他文件（如 CSS/图片）默认缓存 1 个月，更具体的正则（如 .*\.js$）优先级高于通用规则（如 ^/static/）
        location ~* ^/static/ {
            expires 1M;
            add_header Cache-Control "public, max-age=2592000";
        }

        location /auth/ssologin {
            proxy_pass http://127.0.0.1:8011;
            # 这个 X-Target 是给认证完以后重定向的
            # proxy_set_header X-Target $request_uri;
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header Host  $host:$server_port;
            proxy_set_header X-Real-IP  $remote_addr;
            proxy_set_header X-Real-PORT $remote_port;
            proxy_set_header X-Forwarded-For  $proxy_add_x_forwarded_for;
        }

        location /nginx_status {
            access_log off;
            allow 192.168.10.0/24;
            deny all;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

  ## 其它虚拟主机，server 指令开始
}
